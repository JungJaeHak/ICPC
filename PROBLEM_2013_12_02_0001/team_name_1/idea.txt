
--------------------------
Separable.cpp에 대한 아이디어
--------------------------


문제는 Nq > Ns > Np > Nr은 2 4 1 3 permutation 패턴과 Nq < Ns < Np < Nr은 3 1 4
2 permutation 패턴을 테스트 케이스에서 찾는 것이다.

주어진 테스트 케이스 10 30 60 40 20 50을 정렬해서 permutation 1 3 6 4 2 5로 변환
 => heap sort를 적용해서 10 20 30 40 50 60으로 정렬하고 
 => binary search를 적용해서 각 숫자 대신 순서를 기록 10은 1, 30은 3, 60은 6,
    40은 4, 20은 2, 50은 5

2 4 1 3과 3 1 4 2는 서로 옆 자리에 위치한 숫자와 연속적이지 않은 패턴임. 예를
들어 2 3이나 3 2는 서로 옆자리 숫자와 나란히 위치해 있음.

테스트 케이스로 1 2 4 3 6 5가 주어졌을 때 1과 2는 서로 연속적인 값을 갖고 있기
때문에 (1 2)로 하나의 범위로 취급하면 원래 풀고자 했던 문제가 1 3 2 5 4에 대해
문제를 푸는 것과 동일하게 된다.

   (1 2) ---> 1
   4     ---> 3
   3     ---> 2
   6     ---> 5
   5     ---> 4
   
이런 방식으로 옆자리에 위치한 숫자가 혹은 범위가 연속적인 값을 갖는다면 테스트
케이스의 길이를 줄여갈 수 있다. 테스트 케이스의 길이를 줄이는 과정을 반복하다
테스트 케이스의 길이가 1이 되면 2 4 1 3이나 3 1 4 2 패턴이 없음을 확인할 수
있다. 왜냐하면 이 두 패턴은 서로 옆 자리에 위치한 숫자와 연속적인 경우가 없기
때문이다.

 => checkkey 함수에서 스택을 사용해서 이 아이디어를 구현
 => 아래 예제를 통해 checkkey 함수의 내용을 설명

[예1]

1 2 4 3 6 5

 (1 1)     스택에 1을 범위로써 추가

2 4 3 6 5

 (1 2)     스택에 2를 추가하는데 스택 탑에 위치한 범위 1 1과 연속이어서 둘이 합함

4 3 6 5 

 (1 2) (4 4) 스택에 4를 추가하는데 스택 탑에 위치한 범위와 연속이 아니므로 그냥 push

3 6 5

 (1 2) (3 4) 스택에 3을 추가하는데 4와 연속이므로 범위를 합하고
 (1 4)       그리고 그 아래에 위치한 (1 2)와도 연속하므로 그것까지 합함

6 5

 (1 4) (6 6)

5

 (1 4) (5 6)
 (1 6)

이제 테스크 케이스를 모두 살펴보았고 그 결과로 얻은 스택에는 (1 6) 모두 하나의
범위를 이룸. 문제에서 찾고자 하는 두 패턴이 없다고 판단함


[예2]

2 4 1 3

 (2 2)

4 1 3

 (2 2) (4 4)

1 3

 (2 2) (4 4) (1 1)

3

 (2 2) (4 4) (1 1) (3 3)


이제 테스크 케이스를 모두 살펴보았고 그 결과로 얻은 스택에는 여러 개의 분리된 범위가
여전히 남아 있으므로 문제에서 찾고자 하는 패턴이 있다고 판단함




